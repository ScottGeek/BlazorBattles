@page "/register"
@inject IUnitService unitService
@inject NavigationManager navMgr
@inject IBananaService bananaService
@inject IAuthService authService
@inject IToastService toastService


<h3>Register</h3>

<EditForm Model="user" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <label for="email" class="required">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" @bind-Value="user.Username" class="form-control"></InputText>
        <ValidationMessage For="@(() => user.Username)" />
    </div>
    <div class="form-group">
        <label for="password" class="required">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <div class="form-group">
        <label for="confirmPassword" class="required">Confirm Password</label>
        <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() => user.ConfirmPassword)" />
    </div>
    <div class="form-group">
        <label for="bio">Bio</label>
        <InputTextArea id="bio" @bind-Value="user.Bio" class="form-control"></InputTextArea>
        <ValidationMessage For="@(() => user.Bio)" />
    </div>
    <div class="form-group">
        <label for="startUnit">Start Unit</label><br />
        <InputRadioGroup id="startUnit" @bind-Value="user.StartUnitId" class="form-control">
            @foreach (var unit in unitService.Units)
            {
                <InputRadio Value="@unit.Id" /><span style="padding-left: 2px;padding-right: 7px;">@unit.Title</span>
            }
        </InputRadioGroup>
    </div>
    <div class="form-group">
        <label for="bananas">Bananas</label>
        <InputNumber id="bananas" @bind-Value="user.Bananas" class="form-control"></InputNumber>
        <ValidationMessage For="@(() => user.Bananas)" />
    </div>
    <div class="form-group">
        <label for="dateOfBirth">Date of Birth</label>
        <InputDate id="dateOfBirth" @bind-Value="user.DateOfBirth" class="form-control" l></InputDate>
    </div>
    <div class="form-check">
        <InputCheckbox id="confirmed" @bind-Value="user.IsConfirmed" class="form-check-input"></InputCheckbox>
        <label for="confirmed" class="form-check-label">Confirmed</label>
        <ValidationMessage For="@(() => user.IsConfirmed)" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>


@code {

    private UserRegister user = new UserRegister();

    protected override async Task OnInitializedAsync()
    {
        await unitService.LoadUnitAsync();
    }

    private async void HandleRegistration()
    {
        var result = await authService.Register(user);
        if (result.Success)
        {
            toastService.ShowSuccess(result.Message);
            navMgr.NavigateTo("/");
        }
        else
        {
            toastService.ShowError(result.Message);
        }

      // Console.WriteLine($"store this new user in the database@");
      //  //One has to inject the jsruntime for this invoke to work.
      //  jsRuntime.InvokeVoidAsync("console.log", "The full user entered: ", user);
      //  navMgr.NavigateTo("login");

    }
}
